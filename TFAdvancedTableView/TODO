1) TABLEVIEW DYNAMIC DATASOURCE / MVVM Provider
TODO:
- vm - akcje
    - selection call forwarding - push vc, selected vm
    - highlight
    - disable
    - custom - do VC

RESPONDER CHAIN -
nie trzeba by setować interactionDelegate ?
Interactable - UIResponderStandardEditActions ?

1) opcja z wysyłaniem eventu z VM

2) opcja z wysylaniem eventu z widoku
a) - leci tylko po widokach / vc
- widok ma property viewModel i ono mozna odebrac w firstresponderze i na jego podstawie impelementowac akcje
b) widok podpięty przez  IBAction do VM,
VM odbija akcje wysyłając event do buttona podając siebie jako sender


https://medium.com/ios-os-x-development/understanding-cocoa-and-cocoa-touch-responder-chain-12fe558ebe97


w celce mozna skonfigurować gdzie akcje to operacje w viewModelu
cell.editActions = @[[AAPLAction destructiveActionWithTitle:NSLocalizedString(@"Delete", @"Delete") selector:@selector(swipeToDeleteCell:)]];


- integracja z realną aplikacją, sportsbook WH
- delta calculation - simple sections
- Subclass of TFIntention / TFModule
    - rename DynamicTableViewController ?
    - TFUITableViewControlling ?
- unit tests
- rename reuseStrategy - to cellFactory?
- fast enumeration na section

2) TABLEVIEW AUTOMATIC CELLSIZING DELGATE
- header / footer
- fixed size?

- Apple in AdvancedCollectionView simply uses cell by requesting it from datasource, then calculating and then removing from superview.
- check if this approach is better than phantom cell per reuse id
- on screen rotation, cell height seem to be changed properly but content is cut.
- fix Grześka z estimated heights

3) COMPOSITE DATASOURCE / DELEGATE (MODULE) ?
it implements both datasource & delegate to favor modularisation and composition


4) VIEWS
- basic autolayout cells